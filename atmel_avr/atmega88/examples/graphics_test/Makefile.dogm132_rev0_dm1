#
#  Generic and Simple Atmel AVR GNU Makefile
#
#  Desinged for the gnu-avr tool chain
#
#  (c) 2010 Oliver Kraus (olikraus@gmail.com)
#  
#  This file is part of the dogm128 library (http://code.google.com/p/dogm128/).
#
#  This Makefile is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This Makefile is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  Lesser GNU General Public License for more details.
#
#  You should have received a copy of the Lesser GNU General Public License
#  along with dogm128.  If not, see <http://www.gnu.org/licenses/>.
#
#
# 	Features
#		- upload
#		- create exe from library
#		- create assembler listing (.dis)
#
#	Limitations
#		- only C-files supported
#		- no automatic dependency checking (call 'make clean' if any .h files are changed)
#
#	Targets:
#		make
#			create hex file, no upload
#		make upload
#			create and upload hex file
#		make clean
#			delete all generated files
#
#  Note:
#  	Display list make database: make -p -f/dev/null | less

#================================================
# Project Information
TARGETNAME = graphic_test
MCU:=atmega88
F_CPU:=8000000
SRC = graphic_test.c
DOGDIR = ../../../../libraries/Dogm/utility/

# configuration:
# -DDOGM128_HW		board is connected to DOGM128 display
# -DDOGM132_HW		board is connected to DOGM132 display
# -DDOGS102_HW		board is connected to DOGS102 display
# -DDOGXL160_HW_BW	connexted to DOGXL160, use BW mode
# -DDOGXL160_HW_GR	connexted to DOGXL160, use GR mode
# -DDOG_REVERSE		180 degree rotation
# -DDOG_DOUBLE_MEMORY
DOGDEFS = -DDOGM132_HW -DDOG_DOUBLE_MEMORY

# assume ATMEGA SPI interface on the target controller, default is Arduino Hardware
DOGDEFS += -DDOG_SPI_ATMEGA
# Assign port and bit for the chip select line of the DOG controller
# this must be SS pin of the SPI interface. The chip select signal of
# the DOG controller must be connected to this SS pin
DOGDEFS += -DDOG_SPI_SS_PORT=B -DDOG_SPI_SS_PIN=2
# assign port and bit for the clock of the DOG controller (this must be the SCL output of the USI interface)
DOGDEFS += -DDOG_SPI_SCL_PORT=B -DDOG_SPI_SCL_PIN=5
# assign port and bit for the data line of the DOG controller (this must be the DO output of the USI interface)
DOGDEFS += -DDOG_SPI_MOSI_PORT=B -DDOG_SPI_MOSI_PIN=3
# Assign port and bit for the adress line of the DOG controller
# The address line can by any port bit
DOGDEFS += -DDOG_SPI_A0_PORT=B -DDOG_SPI_A0_PIN=1

#================================================
# System/Environment Information
AVRTOOLSPATH:=/usr/bin/
# Type: "avrdude -c ?" to get a full listing.
AVRDUDE_PROGRAMMER := avrispmkii
# com1 = serial port. Use lpt1 to connect to parallel port.
AVRDUDE_PORT := usb

#================================================
# Main part of the Makefile starts here. Usually no changes are needed.

# Append DOG Library
SRC += $(addprefix $(DOGDIR), $(shell ls $(DOGDIR) 2>/dev/null))

# Internal Variable Names
AVRDUDE_FLASH = -U flash:w:$(TARGETNAME).hex
AVRDUDE_FLAGS = -p $(MCU) -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER) -v -v
LIBNAME:=$(TARGETNAME).a
ELFNAME:=$(TARGETNAME).elf
HEXNAME:=$(TARGETNAME).hex
DISNAME:=$(TARGETNAME).dis
OBJ := $(SRC:.c=.o)
# Replace standard build tools by avr tools
CC = $(AVRTOOLSPATH)avr-gcc
CXX = $(AVRTOOLSPATH)avr-g++
AR  = @$(AVRTOOLSPATH)avr-ar
# AVR GNU Tools
OBJCOPY:=$(AVRTOOLSPATH)avr-objcopy
OBJDUMP:=$(AVRTOOLSPATH)avr-objdump
SIZE:=$(AVRTOOLSPATH)avr-size
AVRDUDE = avrdude
# C flags
COMMON_FLAGS = -DF_CPU=$(F_CPU) -mmcu=$(MCU) $(DOGDEFS)
COMMON_FLAGS += -g -Os -Wall -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
COMMON_FLAGS += -I. -I$(DOGDIR)
CFLAGS = $(COMMON_FLAGS) -std=gnu99 -Wstrict-prototypes  

# Additional Suffixes
.SUFFIXES: .elf .hex .dis

# Targets
.PHONY: all
all: $(DISNAME) $(HEXNAME)
	$(SIZE) $(ELFNAME)

.PHONY: upload
upload: $(DISNAME) $(HEXNAME)
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_FLASH)
	$(SIZE) $(ELFNAME)

.PHONY: clean
clean:
	$(RM) $(HEXNAME) $(ELFNAME) $(LIBNAME) $(DISNAME)

# implicit rules
.elf.hex:
	@$(OBJCOPY) -O ihex -R .eeprom $< $@

# explicit rules
$(ELFNAME): $(LIBNAME)($(OBJ)) 
	$(LINK.o) $(COMMON_FLAGS) $(LIBNAME) $(LOADLIBES) $(LDLIBS) -o $@

$(DISNAME): $(ELFNAME)
	$(OBJDUMP) -S $< > $@

	
